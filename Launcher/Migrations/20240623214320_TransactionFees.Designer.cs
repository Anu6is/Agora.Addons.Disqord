// <auto-generated />
using System;
using Emporia.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Launcher.Migrations
{
    [DbContext(typeof(EmporiaDbContext))]
    [Migration("20240623214320_TransactionFees")]
    partial class TransactionFees
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Agora.Shared.Persistence.Models.DefaultEconomyUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Balance")
                        .HasColumnType("REAL");

                    b.Property<long?>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserReference")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("EmporiumId");

                    b.HasIndex("UserReference");

                    b.ToTable("Economy", (string)null);
                });

            modelBuilder.Entity("Agora.Shared.Persistence.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OutbidAlerts")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<ulong>("Reviews")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TradeDealAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<long?>("UserReference")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmporiumId");

                    b.HasIndex("UserReference");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("EmporiumId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Emporium", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TimeOffset")
                        .HasColumnType("TEXT")
                        .HasColumnName("UtcOffset");

                    b.HasKey("Id");

                    b.ToTable("Emporium", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.EmporiumUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReferenceNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmporiumId", "ReferenceNumber")
                        .IsUnique();

                    b.ToTable("EmporiumUser", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessRoles")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Anonymous")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOn")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ExpirationDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HiddenMessage")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Listing")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ListingType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReschedulingChoice")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ShowroomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueTag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReferenceCode");

                    b.HasIndex("EmporiumId", "ShowroomId", "ListingType");

                    b.ToTable("ProductListing", (string)null);

                    b.HasDiscriminator<string>("Listing").HasValue("Listing");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReferenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceNumber");

                    b.ToTable("Product", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Review<Emporia.Domain.Common.UserId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReferenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SubmittedBy")
                        .HasColumnType("TEXT");

                    b.Property<long>("SubmittedOn")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserReview", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Showroom", b =>
                {
                    b.Property<long>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListingType")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmporiumId", "Id", "ListingType");

                    b.ToTable("Showroom", (string)null);
                });

            modelBuilder.Entity("Emporia.Extensions.Discord.AuctionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Anonymous")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BuyNowPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxBidIncrease")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<double>("MinBidIncrease")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Owner")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reschedule")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ReservePrice")
                        .HasColumnType("REAL");

                    b.Property<bool>("ReverseBidding")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StartingPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Subcategory")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Timeout")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmporiumId");

                    b.ToTable("AuctionTemplates", (string)null);
                });

            modelBuilder.Entity("Emporia.Extensions.Discord.DefaultDiscordGuildSettings", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("AdminRole")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllowedListings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("AuditLogChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvailableRooms")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("BiddingRecallLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new TimeSpan(0, 0, 0, 30, 0));

                    b.Property<ulong>("BrokerRole")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("BuyerRole")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DefaultBalance")
                        .HasColumnType("REAL");

                    b.Property<string>("DefaultCurrency")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("DefaultDuration")
                        .HasColumnType("TEXT");

                    b.Property<string>("EconomyType")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalApiKeys")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("Listings")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxListingsLimit")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("MaximumDuration")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("MerchantRole")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("MinimumDuration")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MinimumDurationDefault")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Offset")
                        .HasColumnType("TEXT")
                        .HasColumnName("UtcOffset");

                    b.Property<ulong>("ResultLogChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("SnipeExtension")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("SnipeRange")
                        .HasColumnType("TEXT");

                    b.HasKey("GuildId");

                    b.HasIndex("EmporiumId")
                        .IsUnique();

                    b.ToTable("GuildSettings", (string)null);
                });

            modelBuilder.Entity("Emporia.Extensions.Discord.DefaultListingRequirements", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ListingType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Description")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EmporiumId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Image")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MaxBidIncrease")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Message")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Subcategory")
                        .HasColumnType("INTEGER");

                    b.HasKey("GuildId", "ListingType");

                    b.HasIndex("EmporiumId")
                        .IsUnique();

                    b.ToTable("ListingRequirements", (string)null);
                });

            modelBuilder.Entity("Extension.TransactionFees.Domain.PremiumListing", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryFee")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("EntryRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("ExtendBy")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("RequiredEntries")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PremiumListings", (string)null);
                });

            modelBuilder.Entity("Extension.TransactionFees.Domain.TransactionFeeSettings", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowEntryFee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrokerFee")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerFee")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionFeeSettings", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.CommissionTrade", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.HasDiscriminator().HasValue("Trade Request");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.FlashMarket", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DiscountEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("Flash Market");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.LiveAuction", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<string>("BuyNowPrice")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Timeout")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Live Auction");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.MassMarket", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<int>("AmountPerBundle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CostPerBundle")
                        .HasColumnType("TEXT");

                    b.Property<string>("CostPerItem")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Mass Market");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.MultiItemMarket", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<int>("AmountPerBundle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CostPerBundle")
                        .HasColumnType("TEXT");

                    b.Property<string>("CostPerItem")
                        .HasColumnType("TEXT");

                    b.ToTable("ProductListing", t =>
                        {
                            t.Property("AmountPerBundle")
                                .HasColumnName("MultiItemMarket_AmountPerBundle");

                            t.Property("CostPerBundle")
                                .HasColumnName("MultiItemMarket_CostPerBundle");

                            t.Property("CostPerItem")
                                .HasColumnName("MultiItemMarket_CostPerItem");
                        });

                    b.HasDiscriminator().HasValue("Multiple Item Market");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.RaffleGiveaway", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<uint>("MaxTicketsPerUser")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Raffle Giveaway");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.ReverseTrade", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.HasDiscriminator().HasValue("Reverse Trade");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.StandardAuction", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<string>("BuyNowPrice")
                        .HasColumnType("TEXT");

                    b.ToTable("ProductListing", t =>
                        {
                            t.Property("BuyNowPrice")
                                .HasColumnName("StandardAuction_BuyNowPrice");
                        });

                    b.HasDiscriminator().HasValue("Standard Auction");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.StandardGiveaway", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.HasDiscriminator().HasValue("Standard Giveaway");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.StandardMarket", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<bool>("AllowOffers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("REAL");

                    b.ToTable("ProductListing", t =>
                        {
                            t.Property("Discount")
                                .HasColumnName("StandardMarket_Discount");

                            t.Property("DiscountValue")
                                .HasColumnName("StandardMarket_DiscountValue");
                        });

                    b.HasDiscriminator().HasValue("Standard Market");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.StandardTrade", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<bool>("AllowOffers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SelectedOffer")
                        .HasColumnType("TEXT");

                    b.ToTable("ProductListing", t =>
                        {
                            t.Property("AllowOffers")
                                .HasColumnName("StandardTrade_AllowOffers");
                        });

                    b.HasDiscriminator().HasValue("Standard Trade");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.VickreyAuction", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Listing");

                    b.Property<uint>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Sealed Bid Auction");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.AuctionItem", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Product");

                    b.Property<string>("BidIncrement")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReversed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReservePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartingPrice")
                        .HasColumnType("TEXT");

                    b.ToTable("AuctionItem", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.GiveawayItem", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Product");

                    b.Property<uint>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TicketPrice")
                        .HasColumnType("TEXT");

                    b.Property<uint>("TotalWinners")
                        .HasColumnType("INTEGER");

                    b.ToTable("GiveawayItem", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.MarketItem", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Product");

                    b.Property<string>("CurrentPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Price")
                        .HasColumnType("TEXT");

                    b.ToTable("MarketItem", (string)null);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.TradeItem", b =>
                {
                    b.HasBaseType("Emporia.Domain.Entities.Product");

                    b.Property<string>("SuggestedOffer")
                        .HasColumnType("TEXT");

                    b.ToTable("TradeItem", (string)null);
                });

            modelBuilder.Entity("Agora.Shared.Persistence.Models.DefaultEconomyUser", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithMany()
                        .HasForeignKey("EmporiumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agora.Shared.Persistence.Models.UserProfile", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithMany()
                        .HasForeignKey("EmporiumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Category", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithMany("Categories")
                        .HasForeignKey("EmporiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Emporia.Domain.Entities.Subcategory", "SubCategories", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Title")
                                .HasColumnType("TEXT")
                                .UseCollation("NOCASE");

                            b1.HasKey("Id");

                            b1.HasIndex("CategoryId");

                            b1.ToTable("SubCategory", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Emporium", b =>
                {
                    b.OwnsMany("Emporia.Domain.Common.Currency", "Currencies", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Code")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DecimalDigits")
                                .HasColumnType("INTEGER");

                            b1.Property<long>("EmporiumId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Format")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Symbol")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("EmporiumId");

                            b1.ToTable("Currency");

                            b1.WithOwner()
                                .HasForeignKey("EmporiumId");
                        });

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.EmporiumUser", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithMany("Users")
                        .HasForeignKey("EmporiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Listing", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.EmporiumUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Emporia.Domain.Entities.Showroom", null)
                        .WithMany("Listings")
                        .HasForeignKey("EmporiumId", "ShowroomId", "ListingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Emporia.Domain.Common.Timeline", "ScheduledPeriod", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("ScheduledEnd")
                                .HasColumnType("INTEGER")
                                .HasColumnName("ScheduledEnd");

                            b1.Property<long>("ScheduledStart")
                                .HasColumnType("INTEGER")
                                .HasColumnName("ScheduledStart");

                            b1.HasKey("ListingId");

                            b1.ToTable("ProductListing");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");
                        });

                    b.OwnsOne("Emporia.Domain.Entities.Offer", "CurrentOffer", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("ProductId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Submission")
                                .HasColumnType("TEXT")
                                .HasColumnName("Submission");

                            b1.Property<DateTimeOffset>("SubmittedOn")
                                .HasColumnType("TEXT")
                                .HasColumnName("SubmittedOn");

                            b1.Property<Guid?>("UserId")
                                .HasColumnType("TEXT")
                                .HasColumnName("SubmittedBy");

                            b1.Property<long?>("UserReference")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ListingId");

                            b1.HasIndex("UserId");

                            b1.ToTable("AcceptedOffer", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ListingId");

                            b1.HasOne("Emporia.Domain.Entities.EmporiumUser", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.Navigation("User");
                        });

                    b.Navigation("CurrentOffer");

                    b.Navigation("Owner");

                    b.Navigation("ScheduledPeriod")
                        .IsRequired();
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Product", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Listing", null)
                        .WithOne("Product")
                        .HasForeignKey("Emporia.Domain.Entities.Product", "Id")
                        .HasPrincipalKey("Emporia.Domain.Entities.Listing", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Emporia.Domain.Common.Carousel", "Carousel", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("TEXT");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsMany("Emporia.Domain.Entities.Image", "Images", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid?>("ProductId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Url")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ProductId");

                                    b2.ToTable("Image");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductId");
                                });

                            b1.Navigation("Images");
                        });

                    b.Navigation("Carousel")
                        .IsRequired();
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Review<Emporia.Domain.Common.UserId>", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.EmporiumUser", null)
                        .WithMany("Reviews")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Showroom", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithMany("Showrooms")
                        .HasForeignKey("EmporiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Emporia.Domain.Common.BusinessHours", "ActiveHours", b1 =>
                        {
                            b1.Property<long>("ShowroomEmporiumId")
                                .HasColumnType("INTEGER");

                            b1.Property<long>("ShowroomId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ShowroomListingType")
                                .HasColumnType("TEXT");

                            b1.Property<TimeSpan>("ClosesAt")
                                .HasColumnType("TEXT");

                            b1.Property<TimeSpan>("OpensAt")
                                .HasColumnType("TEXT");

                            b1.HasKey("ShowroomEmporiumId", "ShowroomId", "ShowroomListingType");

                            b1.ToTable("Showroom");

                            b1.WithOwner()
                                .HasForeignKey("ShowroomEmporiumId", "ShowroomId", "ShowroomListingType");
                        });

                    b.Navigation("ActiveHours");
                });

            modelBuilder.Entity("Emporia.Extensions.Discord.AuctionTemplate", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithOne()
                        .HasForeignKey("Emporia.Extensions.Discord.AuctionTemplate", "EmporiumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Emporia.Extensions.Discord.DefaultDiscordGuildSettings", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithOne()
                        .HasForeignKey("Emporia.Extensions.Discord.DefaultDiscordGuildSettings", "EmporiumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Emporia.Extensions.Discord.Delta", "MinBidIncrease", b1 =>
                        {
                            b1.Property<ulong>("DefaultDiscordGuildSettingsGuildId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DeltaType")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DefaultDiscordGuildSettingsGuildId");

                            b1.ToTable("GuildSettings");

                            b1.WithOwner()
                                .HasForeignKey("DefaultDiscordGuildSettingsGuildId");
                        });

                    b.Navigation("MinBidIncrease");
                });

            modelBuilder.Entity("Emporia.Extensions.Discord.DefaultListingRequirements", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithOne()
                        .HasForeignKey("Emporia.Extensions.Discord.DefaultListingRequirements", "EmporiumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Extension.TransactionFees.Domain.PremiumListing", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Listing", null)
                        .WithOne()
                        .HasForeignKey("Extension.TransactionFees.Domain.PremiumListing", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Extension.TransactionFees.Domain.TransactionFeeSettings", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Emporium", null)
                        .WithOne()
                        .HasForeignKey("Extension.TransactionFees.Domain.TransactionFeeSettings", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Emporia.Domain.Entities.AuctionItem", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("Emporia.Domain.Entities.AuctionItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Emporia.Domain.Entities.Bid", "Offers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("ProductId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Submission")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("SubmittedOn")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("UserId")
                                .HasColumnType("TEXT")
                                .HasColumnName("SubmittedBy");

                            b1.Property<long?>("UserReference")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("UserId");

                            b1.ToTable("Bid");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasOne("Emporia.Domain.Entities.EmporiumUser", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.Navigation("User");
                        });

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.GiveawayItem", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("Emporia.Domain.Entities.GiveawayItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Emporia.Domain.Entities.Ticket", "Offers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Number")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("ProductId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Submission")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("SubmittedOn")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("UserId")
                                .HasColumnType("TEXT")
                                .HasColumnName("SubmittedBy");

                            b1.Property<long?>("UserReference")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("UserId");

                            b1.ToTable("Ticket");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasOne("Emporia.Domain.Entities.EmporiumUser", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.Navigation("User");
                        });

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.MarketItem", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("Emporia.Domain.Entities.MarketItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Emporia.Domain.Entities.Payment", "Offers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<int>("ItemCount")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid?>("ProductId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Submission")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("SubmittedOn")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("UserId")
                                .HasColumnType("TEXT")
                                .HasColumnName("SubmittedBy");

                            b1.Property<long?>("UserReference")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("UserId");

                            b1.ToTable("Payment");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasOne("Emporia.Domain.Entities.EmporiumUser", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.Navigation("User");
                        });

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.TradeItem", b =>
                {
                    b.HasOne("Emporia.Domain.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("Emporia.Domain.Entities.TradeItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Emporia.Domain.Entities.Deal", "Offers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Details")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("ProductId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Submission")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("SubmittedOn")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("UserId")
                                .HasColumnType("TEXT")
                                .HasColumnName("SubmittedBy");

                            b1.Property<long?>("UserReference")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("UserId");

                            b1.ToTable("TradeItem_Offers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasOne("Emporia.Domain.Entities.EmporiumUser", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.Navigation("User");
                        });

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Emporium", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Showrooms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.EmporiumUser", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Listing", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Emporia.Domain.Entities.Showroom", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
